{"ast":null,"code":"import * as types from './actionTypes';\nimport { auth } from '../firebaseConfig/fbConfig';\nimport db from '../firebaseConfig/fbConfig';\n\nconst loginstart = () => ({\n  type: types.LOGIN_START\n});\n\nconst loginsuccess = user => ({\n  type: types.LOGIN_SUCCESS,\n  payload: user\n});\n\nconst loginerror = error => ({\n  type: types.LOGIN_ERROR,\n  payload: error\n});\n\nconst registerstart = () => ({\n  type: types.REGISTER_START\n});\n\nconst registersuccess = user => ({\n  type: types.REGISTER_SUCCESS,\n  payload: user\n});\n\nconst registererror = error => ({\n  type: types.REGISTER_ERROR,\n  payload: error\n});\n\nconst logoutstart = () => ({\n  type: types.LOGOUT_START\n});\n\nconst logoutsuccess = () => ({\n  type: types.LOGOUT_SUCCESS\n});\n\nconst logouterror = () => ({\n  type: types.LOGOUT_ERROR\n});\n\nexport const setuser = user => ({\n  type: types.SET_USER,\n  payload: user\n});\nexport const userRole = role => ({\n  type: types.USER_ROLE,\n  payload: role\n});\nexport const hideElement = boolean => ({\n  type: types.HIDE_ELEMENT,\n  payload: boolean\n});\nexport const registerInitiate = (mail, password, displayName, role) => {\n  return function (dispatch) {\n    dispatch(registerstart());\n    auth.createUserWithEmailAndPassword(mail, password);\n    auth.sendSignInLinkToEmail(mail, {\n      url: \"http://localhost:3000\"\n    }).then(_ref => {\n      let {\n        user\n      } = _ref;\n      user.updateProfile({\n        displayName\n      });\n      db.collection('user').doc(user.uid).set({\n        uid: user.uid,\n        mail,\n        role\n      });\n      dispatch(registersuccess(user));\n    }).catch(error => dispatch(registererror(error)));\n  };\n};\nexport const loginInitiate = (mail, password) => {\n  return function (dispatch) {\n    dispatch(loginstart());\n    auth.signInWithEmailAndPassword(mail, password).then(_ref2 => {\n      let {\n        user\n      } = _ref2;\n      dispatch(loginsuccess(user));\n    }).catch(error => {\n      dispatch(loginerror(error.message));\n    });\n  };\n};\nexport const logoutinitiate = () => {\n  return function (dispatch) {\n    dispatch(logoutstart());\n    auth.signOut().then(resp => {\n      dispatch(logoutsuccess(resp));\n    }).catch(error => {\n      dispatch(logouterror(error.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/admin/Desktop/React/website-monitoring/src/Actions/authaction.js"],"names":["types","auth","db","loginstart","type","LOGIN_START","loginsuccess","user","LOGIN_SUCCESS","payload","loginerror","error","LOGIN_ERROR","registerstart","REGISTER_START","registersuccess","REGISTER_SUCCESS","registererror","REGISTER_ERROR","logoutstart","LOGOUT_START","logoutsuccess","LOGOUT_SUCCESS","logouterror","LOGOUT_ERROR","setuser","SET_USER","userRole","role","USER_ROLE","hideElement","boolean","HIDE_ELEMENT","registerInitiate","mail","password","displayName","dispatch","createUserWithEmailAndPassword","sendSignInLinkToEmail","url","then","updateProfile","collection","doc","uid","set","catch","loginInitiate","signInWithEmailAndPassword","message","logoutinitiate","signOut","resp"],"mappings":"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","sourcesContent":["import * as types from './actionTypes'\nimport {auth} from '../firebaseConfig/fbConfig'\nimport db from '../firebaseConfig/fbConfig'\nconst loginstart = () => ({\n    type:types.LOGIN_START\n})\nconst loginsuccess = (user) =>({\n    type:types.LOGIN_SUCCESS,\n    payload:user\n})\nconst loginerror = (error) => ({\n    type:types.LOGIN_ERROR,\n    payload:error\n})\n\nconst registerstart = () =>({\n    type:types.REGISTER_START\n})\nconst registersuccess = (user) =>({\n    type:types.REGISTER_SUCCESS,\n    payload:user\n})\nconst registererror = (error) =>({\n    type:types.REGISTER_ERROR,\n    payload:error\n})\nconst logoutstart = () => ({\n    type:types.LOGOUT_START\n})\nconst logoutsuccess = () =>({\n    type:types.LOGOUT_SUCCESS\n})\nconst logouterror = () => ({\n    type:types.LOGOUT_ERROR\n})\n\nexport const setuser = (user) =>({\n    type:types.SET_USER,\n    payload:user\n})\nexport const userRole = (role) =>({\n    type:types.USER_ROLE,\n    payload:role\n})\nexport const hideElement = (boolean) =>({\n    type:types.HIDE_ELEMENT,\n    payload:boolean\n})\nexport const registerInitiate = (mail,password,displayName,role) => {\n    return function(dispatch){\n        dispatch(registerstart());\n        auth.createUserWithEmailAndPassword(mail,password)\n        auth.sendSignInLinkToEmail(mail,{url:\"http://localhost:3000\"})\n        .then(({user})=>{\n            user.updateProfile({\n                displayName\n            })\n            db.collection('user').doc(user.uid).set({uid:user.uid,mail,role})\n            dispatch(registersuccess(user))\n        })\n        .catch((error)=>dispatch(registererror(error)))\n    }\n}\n\nexport const loginInitiate = (mail,password) => {\n    return function(dispatch){\n        dispatch(loginstart())\n        auth.signInWithEmailAndPassword(mail,password)\n        .then(({user})=>{\n            dispatch(loginsuccess(user))\n        })\n        .catch((error)=>{dispatch(loginerror(error.message))})\n    }\n}\n\nexport const logoutinitiate = () =>{\n    return function(dispatch){\n        dispatch(logoutstart())\n        auth.signOut()\n        .then((resp)=>{dispatch(logoutsuccess(resp))})\n        .catch((error)=>{dispatch(logouterror(error.message))})\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}
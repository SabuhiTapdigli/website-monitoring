{"ast":null,"code":"import * as types from './actionTypes';\nimport { auth } from '../firebaseConfig/fbConfig';\nimport db from '../firebaseConfig/fbConfig';\n\nconst loginstart = () => ({\n  type: types.LOGIN_START\n});\n\nconst loginsuccess = user => ({\n  type: types.LOGIN_SUCCESS,\n  payload: user\n});\n\nconst loginerror = error => ({\n  type: types.LOGIN_ERROR,\n  payload: error\n});\n\nconst registerstart = () => ({\n  type: types.REGISTER_START\n});\n\nconst registersuccess = user => ({\n  type: types.REGISTER_SUCCESS,\n  payload: user\n});\n\nconst registererror = error => ({\n  type: types.REGISTER_ERROR,\n  payload: error\n});\n\nconst logoutstart = () => ({\n  type: types.LOGOUT_START\n});\n\nconst logoutsuccess = () => ({\n  type: types.LOGOUT_SUCCESS\n});\n\nconst logouterror = () => ({\n  type: types.LOGOUT_ERROR\n});\n\nexport const setuser = user => ({\n  type: types.SET_USER,\n  payload: user\n});\nexport const hideElement = boolean => ({\n  type: types.HIDE_ELEMENT,\n  payload: boolean\n});\nexport const registerInitiate = (mail, password, displayName, role) => {\n  return function (dispatch) {\n    dispatch(registerstart());\n    auth.createUserWithEmailAndPassword(mail, password).then(_ref => {\n      let {\n        user\n      } = _ref;\n      user.updateProfile({\n        displayName\n      });\n      db.collection('user').doc().set({\n        uid: user.uid,\n        role: role\n      });\n      dispatch(registersuccess(user));\n    }).catch(error => dispatch(registererror(error)));\n  };\n};\nexport const loginInitiate = (mail, password) => {\n  return function (dispatch) {\n    dispatch(loginstart());\n    auth.signInWithEmailAndPassword(mail, password).then(_ref2 => {\n      let {\n        user\n      } = _ref2;\n      dispatch(loginsuccess(user));\n    }).catch(error => {\n      dispatch(loginerror(error.message));\n    });\n  };\n};\nexport const logoutinitiate = () => {\n  return function (dispatch) {\n    dispatch(logoutstart());\n    auth.signOut().then(resp => {\n      dispatch(logoutsuccess(resp));\n    }).catch(error => {\n      dispatch(logouterror(error.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/admin/Desktop/React/website-monitoring/src/Actions/authaction.js"],"names":["types","auth","db","loginstart","type","LOGIN_START","loginsuccess","user","LOGIN_SUCCESS","payload","loginerror","error","LOGIN_ERROR","registerstart","REGISTER_START","registersuccess","REGISTER_SUCCESS","registererror","REGISTER_ERROR","logoutstart","LOGOUT_START","logoutsuccess","LOGOUT_SUCCESS","logouterror","LOGOUT_ERROR","setuser","SET_USER","hideElement","boolean","HIDE_ELEMENT","registerInitiate","mail","password","displayName","role","dispatch","createUserWithEmailAndPassword","then","updateProfile","collection","doc","set","uid","catch","loginInitiate","signInWithEmailAndPassword","message","logoutinitiate","signOut","resp"],"mappings":"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","sourcesContent":["import * as types from './actionTypes'\nimport {auth} from '../firebaseConfig/fbConfig'\nimport db from '../firebaseConfig/fbConfig'\nconst loginstart = () => ({\n    type:types.LOGIN_START\n})\nconst loginsuccess = (user) =>({\n    type:types.LOGIN_SUCCESS,\n    payload:user\n})\nconst loginerror = (error) => ({\n    type:types.LOGIN_ERROR,\n    payload:error\n})\n\nconst registerstart = () =>({\n    type:types.REGISTER_START\n})\nconst registersuccess = (user) =>({\n    type:types.REGISTER_SUCCESS,\n    payload:user\n})\nconst registererror = (error) =>({\n    type:types.REGISTER_ERROR,\n    payload:error\n})\nconst logoutstart = () => ({\n    type:types.LOGOUT_START\n})\nconst logoutsuccess = () =>({\n    type:types.LOGOUT_SUCCESS\n})\nconst logouterror = () => ({\n    type:types.LOGOUT_ERROR\n})\nexport const setuser = (user) =>({\n    type:types.SET_USER,\n    payload:user\n})\n\nexport const hideElement = (boolean) =>({\n    type:types.HIDE_ELEMENT,\n    payload:boolean\n})\nexport const registerInitiate = (mail,password,displayName,role) => {\n    return function(dispatch){\n        dispatch(registerstart());\n        auth.createUserWithEmailAndPassword(mail,password)\n        .then(({user})=>{\n            user.updateProfile({\n                displayName\n            })\n            db.collection('user').doc().set({uid:user.uid,role:role})\n            dispatch(registersuccess(user))\n        })\n        .catch((error)=>dispatch(registererror(error)))\n    }\n}\n\nexport const loginInitiate = (mail,password) => {\n    return function(dispatch){\n        dispatch(loginstart())\n        auth.signInWithEmailAndPassword(mail,password)\n        .then(({user})=>{\n            dispatch(loginsuccess(user))\n        })\n        .catch((error)=>{dispatch(loginerror(error.message))})\n    }\n}\n\nexport const logoutinitiate = () =>{\n    return function(dispatch){\n        dispatch(logoutstart())\n        auth.signOut()\n        .then((resp)=>{dispatch(logoutsuccess(resp))})\n        .catch((error)=>{dispatch(logouterror(error.message))})\n    }\n}\n"]},"metadata":{},"sourceType":"module"}